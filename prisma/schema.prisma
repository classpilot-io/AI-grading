generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id           String       @id @default(uuid())
  role         UserRole
  name         String
  email        String       @unique
  passwordHash String
  createdAt    DateTime     @default(now())
  updatedAt    DateTime?
  assignments  Assignment[] @relation("TeacherAssignments")
  submissions  Submission[] @relation("StudentSubmissions")
}

model Assignment {
  id                String         @id @default(uuid())
  teacherId         String
  subject           SubjectType
  name              String
  className         String
  level             String?
  description       String?
  questionPaperPath String?
  answerKeyPath     String?
  submissionLink    String         @unique
  createdAt         DateTime       @default(now())
  updatedAt         DateTime?
  teacher           User           @relation("TeacherAssignments", fields: [teacherId], references: [id])
  classSummaries    ClassSummary[]
  submissions       Submission[]

  @@index([teacherId])
}

model Submission {
  id                 String           @id @default(uuid())
  assignmentId       String
  studentId          String?
  studentIdentifier  String
  submissionFilePath String
  status             SubmissionStatus @default(pending)
  scoreTotal         Float?
  summary            String?
  gradedAt           DateTime?
  createdAt          DateTime         @default(now())
  results            Json?
  assignment        Assignment @relation(fields: [assignmentId], references: [id], onDelete: Cascade)
  student            User?            @relation("StudentSubmissions", fields: [studentId], references: [id])

  @@index([assignmentId])
  @@index([studentId])
}

model ClassSummary {
  id           String     @id @default(dbgenerated("gen_random_uuid()"))
  assignmentId String
  metrics      Json
  createdAt    DateTime   @default(now())
  assignment   Assignment @relation(fields: [assignmentId], references: [id], onDelete: Cascade)

  @@index([assignmentId])
}

enum UserRole {
  student
  teacher
}

enum SubjectType {
  mathematics
  english
}

enum SubmissionStatus {
  pending
  graded
  failed
}
